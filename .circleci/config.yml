# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
# Use a package of configuration called an orb.
orbs:
  aws-cli: circleci/aws-cli@2.0.3
  slack: circleci/slack@4.4.4
# Orchestrate or schedule a set of jobs
commands:
  destroy-prometheus-environment:
    description: Destroy prometheus cloudformation stacks given a workflow ID.  
    steps:
      - run:
          name: Destroy backend environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name prometheus-${CIRCLE_WORKFLOW_ID:0:7}
      - slack/notify:
          channel: monitoring
          event: fail
          template: basic_fail_1      
workflows:
  default:
    jobs:
      - create-monitoring-server
      - configure-monitoring-server:
          requires:
            - create-monitoring-server

jobs:
  create-monitoring-server:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run: yum install -y jq
      - run:
          name: Create ec2 instance to setup monitoring
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/prometheus-server.yml \
              --tags project=prometheus-server \
              --stack-name prometheus-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}   

      - run:
          name: Add ec2 public dns to ansible inventory and save url to MemCache
          command: |
            prometheus_server_url=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicDnsName' \
              --filters "Name=tag:Name,Values=prometheus-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text)
            echo "prometheus_server_url:${prometheus_server_url}";
            echo $prometheus_server_url >> .circleci/ansible/inventory.txt
            curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID}" --request PUT --data "${prometheus_server_url}" https://api.memstash.io/values/prometheus_server_url
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - slack/notify:
          channel: monitoring
          event: pass
          template: basic_success_1        
      - destroy-prometheus-environment         

  configure-monitoring-server:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["4c:e6:72:4d:76:84:ef:12:2b:ea:d7:d5:66:d5:41:79"]
      - attach_workspace:
          at: ~/
      - run:
          name: install dependencies (awscli for rollback command)
          command: |
            apk add --update ansible
            apk add --update jq 
            apk add --update curl
            pip install awscli
      # - run: sed -i "s|you_slack_api_url|${YOUR_SLACK_API_URL}|g" .circleci/ansible/roles/configure-alert-manager/files/alertmanager.yml
      - run:
          name: update slack url in alertmanger.yml
          command: |
            sed -i "s|you_slack_api_url|${YOUR_SLACK_API_URL}|g" .circleci/ansible/roles/configure-alert-manager/files/alertmanager.yml
      - run:
          name: add aws creds in prometheus.conf.j2
          command: |
            sed -i "s/your_aws_region/${AWS_DEFAULT_REGION}/g" .circleci/ansible/roles/configure-prometheus-server/templates/prometheus.conf.j2
            sed -i "s/your_access_key/${AWS_ACCESS_KEY_ID}/g" .circleci/ansible/roles/configure-prometheus-server/templates/prometheus.conf.j2
            sed -i "s/your_secret_key/${AWS_SECRET_ACCESS_KEY}/g" .circleci/ansible/roles/configure-prometheus-server/templates/prometheus.conf.j2
            
      - run: cat .circleci/ansible/inventory.txt
      - run:
          name: configure ec2 for monitoring by prometheus and alert manager
          command: |
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/playbook-prometheus-alert-manager.yml 

      - slack/notify:
          channel: monitoring
          event: pass
          template: basic_success_1       
      - destroy-prometheus-environment
   
